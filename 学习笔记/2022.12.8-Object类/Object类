1. JDK类库的根类：Object类
	
		研究老祖宗类，这些方法都是子类通用的，任何一个类默认继承Object类。就算没有直接继承，最后也会间接继承。

		Object类当中有哪些常用的方法？
			
				 我们去哪里找这些方法呢？
							
							第一种方法：去源代码中寻找，但是这种过程太麻烦，源代码也比较难

							第二种方法：去查阅java的类库的帮助文档。

				什么是API？
					
						应用程序编程接口（Application Program Interface）；

						整个JDK的类库就是一个javase的API。

						每一个API都会配置一套API帮助文档。   

						SUN公司提前写好的这一套类库就是API（一般每一份API都会对应一份API帮助文档）

		目前为止我们只需要知道这几个方法即可：
			
				protected Object clone()  ；负责对象克隆的；

				int hashCode()  ；负责获取对象哈希值的一个方法；

				boolean equals(Object obj)  ；判断两个对象是否相等；

				String toString()  ；负责将对象转换为字符串形式；

				protected void finalize()  ；垃圾回收器，负责调用的方法。
 

具体内容见-----代码部分

2. toString()方法

		以后所有类的toString方法是需要进行重写的。

		重写的规则：越简单越明了就好；

		System.out.println（引用）；这里会自动调用“引用”的toString方法；

		String类是SUN 公司写的，toString方法已经重写了。

3. equals方法

	以后所有类的equals方法也需要进行重写，因为Object类的equals方法比较的是两个对象的内存地址，我们应该比较内容，所以需要重写

	重写规则：自己定，主要是看什么和什么相等的时候，定义为二者相等

	基本数据类型比较使用：==

	引用数据类型比较使用：equals方法

	String类是SUN公司编写的，所以String类的equals方法重写了。

				以后判断两个字符串是否相等，最好不要使用==，要调用字符串对象的equals方法。

	equals方法的重写一定要彻底；该重写的部分要全部重写。两个对象的比较一定不能用==判断，要用equals判断。


4.关于Object类中的finalize（）方法：非重点,了解即可

			1.在Object类中的源代码：
				 protected void finalize() throws Throwable { }

				 GC负责：调用finalize（）方法

			2.finalize（）方法只有一个方法体，里面没有代码，而且这个方法是protected修饰的。

			3.这个方法不需要程序员手动调用，JVM垃圾回收器负责调用这个方法，不像equals和toString方法是需要我们自己写代码调用的，
				 finalize（）只需要重写，重写完了会有程序来调用

			4.finalize（）方法的执行时机：
				 当一个Java对象即将被垃圾回收器回收的时候，垃圾回收器负责调用finalize方法

			5.finalize方法实际上是SUN公司为Java程序员准备的一个时机，垃圾销毁时机，如果希望在对象销毁时机执行一段代码的话，
				
					这段代码要写到finalize方法当中

			6.静态代码块的作用是什么？
				 static{

				 }
				 静态代码块是在类加载的时候执行的，并且只执行一次，
				 这是SUN公司准备的类加载时机

				 finalize（）方法同样也是SUN为程序员准备的一个时机，这个时机是垃圾回收时机。

			7.提示：Java中的垃圾回收器不是轻易启动的，垃圾太少，或者时间没到，种种条件下，有可能启动，也有可能不启动


5.hashCode方法：

    在Object中的hashCode方法的原码：

        public native int hashCode();

        这个方法不是抽象方法，带有native关键字，底层是调用的C++程序

     hashCode方法返回的是：哈希码

        实际上就是一个Java对象的内存地址，经过哈希算法，得出一个值，所以hashCode（）方法的执行结果可以等同看做是一个Java对象的内存地址


6.匿名内部类：

			 1.什么是内部类？

				  内部类：在类的内部又定义了一个新的类。被称为内部类

				  注意：内部类是可以用public private protected 默认访问权限修饰的

			 2.内部类的分类：

				  静态内部类：类似于静态变量

				  实例内部类：类似于实例变量

				  局部内部类：类似于局部变量

			 3.使用内部类编写的代码，可读性差。能不用尽量不用

			 4.匿名内部类是局部内部类的一种

				  因为这个类没有名字而得名，叫做匿名内部类

			 5.学习匿名内部类是方便以后读懂别人的代码，能理解别人的语法

				  不建议使用匿名内部类：原因：1.因为一个类没有名字。没有办法重复使用；；2.代码太乱，可读性太差

			 6.不理解就算了，记住这个写法就行

			 7.IDEA中纠正错误的快捷键：alt+回车

382