1.计算机编程语言发展史：
	第一代语言：机器语言（完全的二进制语言，代表：打孔机）
	第二代语言：低级语言（代表：汇编语言）
	第三代语言：高级语言
		C语言：面向过程的
		C++：一半面向对象，一半面向过程
		JAVA：完全面向对象（底层是c语言）
		Python：面向对象
2.JDK：JAVA开发工具箱，一个基础的工具箱；
	JDK不是集成开发环境，是JAVA开发过程中最基础的库
3.JAVA被分为三大块（98年）：
	J2SE：基础版本（基础语法+基础库）--JAVASE
	J2EE：企业版（专为企业开发软件，为企业提供解决方案）--JAVAEE
	J2ME：微型版（专为微型版本做嵌入式开发）--JAVAME
4.JAVA之父：James Gosling
5.JAVA由Sun Microsystems公司在1990年创办，1995年公布；
	后面2009年Oracle甲骨文公司将Sun公司收购
6.JAVA特性：

	6.1简单性：相对于C++语言
		在JAVA语言中真正操作内存的是：JVM（JAVA虚拟机；用C++语言写好的一个虚拟的电脑）
		所有的JAVA程序都是运行在JAVA虚拟机当中的。
		而JAVA虚拟机执行过程中再去操作内存
		JAVA屏蔽了指针的概念程序员不能直接操作指针，不能直接操作内存；
		优点是不容易导致内存泄漏；缺点是：效率问题，操作感较差
	
		CPU:中央处理器；相当于人类大脑，负责发送并执行指令，整个计算机的指挥官
		内存：程序运行过程中的临时存储空间；断电之后或者关机之后内存中的数据就消失了
		硬盘：持久化设备；数据不会因为断电消失
		主板：相当与人类的躯干，相当于一个载体，CPU，内存，硬盘等主要部件放在主板上

	6.2面向对象
		复杂问题简单化

	6.3健壮性：不容易导致数据的泄露，相对于C++而言
		主要是因为JAVA的一种的机制：
		垃圾自动回收机制（GC机制）。
		缺点：不能及时清理

	6.4JAVA完全支持多线程并发机制

	6.5可移植性/跨平台
		Java只需要编写一次，可以做到到处运行，一次编写到处运行
		实际上是通过JVM虚拟机与WINDOWS系统或者MAC系统进行交互，
		JAVA在不同的系统上通用，但是JVM存在不同版本；
		而JVM是通过安装JDK实现的，
		安装JDK自动安装JVM；所以JDK也有不同的版本
		---JVM屏蔽了操作系统之间的差异
		缺点：对于运行JAVA来说必须先有一个JVM
		JAVA语言可以用来写病毒；但是很难让用户产生病毒

7.JDK,JRE,JVM三者之间的关系：

			JDK:java开发工具箱
			JRE:JAVA运行环境
			JVM:JAVA虚拟机
			
			JDK包括JRE，JRE包括JVM
			JVM是不能独立安装的
			有单独的JDK安装包
			有单独的JRE安装包
			没有单独的JVM安装包

	安装JDK的时候，JRE就自动安装了，同时JRE内部的JVM就自动安装了
	安装JRE的时候，JVM就自动安装了

	假设你在软件公司开发了一款新的软件，现在要去客户那边给客户把项目
	部署一下，把项目跑起来，你需要安装JDK嘛
		只需要安装JRE就可以了；JRE体积很小，安装便捷迅速
	
	为什么安装JDK的时候会自带一个JRE
		因为JAVA程序员开发完一个程序之后，要测试这个程序，让这个程序
		运行起来需要JRE。所以安装的时候自带一个JRE。
	
8.对JAVA加载与执行的理解
	JAVA程序非常重要的两个阶段：编译阶段，运行阶段
	JAVA程序员直接编写的JAVA程序代码（普通文本）是无法执行被JVM识别的。
	JAVA程序员编写的JAVA代码这种普通文字必须经过一个编译，将这个"普通
	文本代码“变成”字节码“，JAVA能够识别”字节码“；JAVA这种普通文本变成
	字节码的过程，称为编译

	JAVA代码这种普通文本被称为：JAVA源代码。源代码不能直接执行，需要
	经过编译，编译之后才可以运行

	编译阶段和运行阶段可以在不同的操作系统上执行吗
		可以的；在Windows上编译；编译之后生成字节码，把字节码放在Linux上
		运行，完全可以；因为JAVA是跨平台的。可以做到一次编译到处使用

	JAVA源代码一旦编译之后，源代码可以删除吗？只留下字节码可以执行嘛
		完全可以执行；因为源代码完全不参与程序的执行过程。
		参与执行过程的是字节码。最好不要删除，避免重新进行编译。

	放源代码的文件扩展名必须是：xxx.java
	并且要注意，编译生成的字节码文件扩展名：xxx.class
	1个java源文件是可以编译生成多个class文件的
	最终运行的是class文件

	字节码文件不是二进制文件；如果是二进制文件，JVM就不需要进行工作了
	，操作系统可以直接运行二进制文件；JVM虚拟机就是将字节码解释转化成
	为二进制

	JAVA执行过程：
		编译阶段：（可以在Windows上）
			新建.java文件-->文编编辑器打开xxx.java文件-->在xxx.java文件中编
			写源代码-->保存-->使用编译器对文件进行编译-->编译通过，生成class
			文件；否则不生成class文件
		运行阶段（JRE在起作用）：（在Windows上或者Linux上）
			若果是在Linux操作系统上执行，需要将Windows上生成的class文件拷贝
			过去，不需要拷贝源代码-->使用JDK自带的一个命令/工具执行字节码-->
			往下面的步骤就交给JVM，不需要程序员干涉-->JVM将生成的字节码交给
			OS操作系统，操作系统会执行二进制码和硬件进行交互。
		在以上过程中，两个非常重要的命令：
			javac命令：负责编译
			Java命令：负责运行
		编译生成的A.class文件，称A为类的名字

	程序员最终需要进行的过程就是：
		编写--编译（javac.exe）--运行（java.exe）

	环境变量包括：
		系统变量：范围比较大；对计算机中所有用户进行修改
		用户变量：范围比较小仅仅对当前用户起作用
	
	查看JAVA的版本命令（P36）：
		java -version（注意中间要空格）

	Path环境变量的作用是：
		给Windows操作系统指路的；告诉Windows操作系统去
		哪里找到这个命令文件

	Path环境变量本质上是隶属于Windows的

	以后如果在DOS命令中出现“命令找不到错误了”，考虑到
	配置环境变量path

	Javac命令用法：
		Javac java原文件的路径


		





