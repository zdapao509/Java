多态的语法基础：
	1.学习基础语法之前，需要明确两个概念：
		第一个：向上转型
			子----->父(自动类型转换)
		第二个：向下转换
			父----->子（强制类型转换，需要加强制类型转换符）


		注意：
			java 中允许向上转型，也允许向下转型

			***无论是向上转型还是向下转型：
			两种类型之间必须有继承关系，没有继承关系编译器会报错

			专业说法：向上转型和向下转型不要说是强制类型转换，因为自动类型转换和强制类型转换是使用在
			基本的数据类型方面的，在引用数据类型方面只有向上转型和向下转型

2.多态指的是：
		父类型引用指向子类型的对象：
			包括编译阶段和运行阶段：
				编译阶段：绑定父类的方法；
				运行阶段：动态绑定子类型对象的方法
				多种形态。


没有继承关系的两个类型之间存在转型嘛？
				不存在
			错误: 不兼容的类型: Bird无法转换为Animal
                Animal a5=new Bird();


				什么是多态？
					多种形式，多种状态。

				分析：
					a4.move()执行过程

					java程序分成编译阶段和运行阶段：
						
						先来分析编译阶段：	
							对于编译器来说：
								编译器只知道a4的类型是Animal，
								所以编译器在检查语法的时候，会在Animal.class字节码文件中找move()方法，找到了，
								绑定上move()方法，编译通过了，静态绑定成功。（编译阶段属于静态绑定。）

						再来分析运行阶段：
							运行阶段的时候，实际上在堆内存中创建的java对象是Dog对象，所以move（）的时候，
							真正参与move的对象是一条狗，所以运行阶段会动态执行Dog对象的move()方法，这个过程
							属于运行阶段绑定（运行阶段绑定属于动态绑定）


				多态表示多种形态：
					编译时一种形态
					运行时一种形态

java中只有类名或者引用才能去“.”
		类名.
		引用.



******多态在开发中的应用********：
	
	多态在开发中的作用是：降低程序的耦合度，提高程序的扩展力

	public class Master{
		public void feed(Dog s){}
		public void feed(Cat r){}
	}
	以上的代码显示：Master和Dog以及Cat的关系很紧密（耦合度高），导致扩展能力变差

	public class Master{
		public void feed(Pet a){
			a.eat();
		}
	}
	以上就表示：主人和狗猫之间的关系脱离了，主人更关心的是宠物这个类。
	这样主人和狗猫之间的耦合度就降低了。提升了软件的扩展性

	面向对象的三大特征：
		封装、继承、多态

		一环扣一环

		有了封装，有了整体的概念
		对象和对象之间产生了继承
		有了继承之后，才有了方法的覆盖和多态

软件开发的一个基本原则：OCP（对扩展开放。对修改关闭）
目的是：降低程序的耦合度。提高程序的扩展能力

面向抽象编程，不建议面向具体编程。


解释之前遗留的问题：

		私有方法无法被覆盖

		方法覆盖只是针对于“实例方法”，“静态方法覆盖”没有意义


	1.方法覆盖需要和多态机制联合起来使用才有意义。
		
		Animal a=new Cat();
		a.move();

		要的是什么效果？  编译的时候move()方法是Animal的。运行的时候，自动调用到子类重写move()方法上。

		假设没有多态机制，只有方法覆盖机制，会出现什么现象：没有多态机制的话，方法覆盖可有可无。

		没有多态机制，方法覆盖也可以没有，如果父类的方法无法满足子类业务需求的时候，子类完全可以定义一个新的方法。

		方法覆盖和多态是不能分开的。

	2.静态方法存在方法覆盖吗?

		多态自然就和对象有关系了。

		而静态方法的执行不需要对象。

		所以，一般情况下，我们会说静态方法“不存在”方法覆盖

		不探讨静态方法的覆盖。


总结：私有不能覆盖；静态不谈覆盖。



在方法覆盖中，关于方法的返回值类型。

		什么条件满足之后，会构成方法的覆盖？
					
					1.发生在具有继承关系的两类之间。
					2.父类中的方法和子类重写之后的方法：
							相同的方法名、相同的形式参数列表、相同的返回值类型

			学习了多态机制之后，相同的返回值类型---这句话可以做一点修改吗？

					对于返回值类型是基本数据类型来说，返回值类型必须一致。

					对于返回值类型是引用数据类型来说，如果返回的类型是  类的本身  或是  其子类  是可以被允许的，但是返回类的父类是不可以的。具体见
					OverrideTest07.java。也就是说，重写之后的返回值类型可以变得更小，但是意义不大。