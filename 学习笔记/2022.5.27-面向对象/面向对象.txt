面向对象和面向过程的区别：
	从语言角度出发：
		对于C语言来说，完全面向过程
		对于C++来说，一半面向对象，一半面向过程
		对于java来说，完全面向对象

	面向过程：
		注重步骤，注重的是实现这个功能的步骤；第一步干什么，第二部干什么
		注重实现功能的因果关系，因为有a所以有b,因为b所以有c
		面向过程中没有对象的概念，只是实现这个功能的步骤以及因果关系

		缺点：面向过程最主要的是每一步与每一步的因果关系，其中A步骤关系到B步骤，A和B联系成一个整体
		形成一个子模块。子模块与子模块之间因为因果关系结合在一起，假设之间任何一个因果出现问题，此时
		整个系统的系统的运转都会出现问题，代码和代码之间的耦合度太高，扩展能力太差。

		采用面向过程开发一台计算机，这台计算机将没有任何一个部件，所有的都是融合在一起，假设任何一个部位
		出现问题，整个计算机就不能用了，没有对象的关系。

		面向对象开发一台计算机的话，任何一个组件都是一个对象的，比如，内存条，CPU

		面向过程的优点：快速开发
			对于小型项目，采用面向过程的方式进行开发，效率较高，不需要前期进行对象的提取，模型的建立
			采用面向过程可以直接开始干活，直接写代码，编写因果关系，实现功能。
		
	面向对象：
		采用面向对象的方式进行开发，更符合人类的思维方式，人类是以对象的方式认识世界的
		面向对象就是将现实世界分割成不同的单元，然后给一个环境驱动一下，让各个对象协作
		起来行成一个系统。耦合度低，扩展能力强。

	面向过程主要关注的是：实现步骤以及整个过程
	面向对象主要关注的是：对象A,对象B ，对象C，然后ABC进行组合


面向对象
1.术语：实现一个软件的过程：分析--设计---编程

		OOA：面向对象的分析
		OOD：面向对象的设计
		OOP： 面向对象的编程
2.三大特征：

	封装-继承-多态

	java只是面向对象的一种语言，PYTHON 也是

3.类和对象的概念
	
	面向对象中最主要的一词是：对象

	类：现实世界中不存在的，是一个抽象的概念，是一个模板，是我们经过思考总结抽象的结果
		本质上是将一些对象的特征提取出来的结果，通过对象来进行提取类的过程叫抽象

		类：明星

	对象：对象是实际存在的个体。另一个名称：实例；通过类创建对象的过程叫实例化

		对象：宋小宝，刘德华

	在java语言中，要想得到对象，必须先定义类，对象是通过一个类创造出来的

4.类是一个模板，是描述共同特征的一个模板，共同特征包括什么呢

		状态特征（属性）+动作特征（方法）

		比如：潘长江身高150，会打篮球就是属性+方法
5.类的定义：
	语法格式：
		[修饰符列表]  class 类名{
			类体=属性+方法
			属性在代码中以变量的形式存在
			方法描述动作/行为

		}

		注意：修饰符列表可以省略

	属性对应的是数据，在程序中只能放在变量中，属性其实就是变量

	变量的分类：根据出现的位置进行划分，

			在方法体中申明的变量：局部变量

			在方法体外声明的变量：成员变量，这里的成员变量就是属性



定义学生类，编写成员变量作为属性

		Student即是一个类名，又是一个类型名，属于引用数据类型
		public class Student{
			public static void main (String[] args){
				int xueHao;------------------变量必须先声明，再赋值，才能进行访问。
				String name;
				int Age;
				String zhuZhi;

			}
		}
对象的创建和使用：
		public class test{
			public static void main(String[] args){
					int i=100;

						这里的i是变量名，int是变量的数据类型，100是具体的数据

					Student a1=new student();

						这里的a1是变量名，a1不能叫做对象，只是一个变量的名字；a1属于局部变量

						Student是变量a1的数据类型，引用数据类型

						new Student()  这是一个对象，学生类创建出来的对象

						a1这个局部变量叫做引用，不叫对象，对象是存储在堆内存中的，而对象在堆内存中的
						地址赋给了a1这个变量，a1存储在栈内存中，所以a1实际上是存了这个对象在堆内存中
						的地址


					创建对象的语法是：new 类名（）；

					类是模板，通过一个类，可以创建N多个对象；new是一个运算符，专门负责创建对象



					数据类型包括两种：基本数据类型+引用数据类型

					java中所有的类都属于引用数据类型

					用Student类创建一个对象：相当于采用Student类实例化了几个Student类；

						Student a2=new Student();--------------和int i=100一个道理
			}

		}

创建对象对应的jvm内存结构：

	JVM中包括三个区：

	方法区：存储代码片段，方法区最先有数据，因为类最先被加载；

	堆内存：新创建的对象存储在堆中，对象的实例变量存储在堆中；new运算符的作用就是在堆内存中开辟
			一块内存空间，用于存储对象和他的实例变量

	栈内存：主要存储局部变量，局部变量是在方法中的；方法调用，压栈，该方法需要的内存在栈中分配，栈
			的活动最频繁，一直在弹栈，压栈；从最开始的main方法，然后是局部变量；


对象的创建和使用：
	
	注意：对于成员变量来说，没有手动赋值时，系统默认赋值，赋值表如下：
		
		类型                                     默认值
		-------------------------------------------
		byte						   0
		short					   0
		int						   0
		long						   0L
		float						   0.0F
		double					   0.0
		boolean					   false
		char						   \u0000
		引用数据类型			   null（表示空，引用类型默认值）


	实例变量：对象又被称为“实例”

	实例变量实际上就是：对象级别的变量；先有对象才能有实例变量，不能通过类名访问实例变量


	对象：通过new出来的，在堆内存中存储

	引用：变量用于存储指向堆内存中的对象的地址的（比如a1,a2）
	（java程序员没有权利直接操作堆内存中的数据，需要栈内存中的引用来进行访问，如果没有引用访问他
	，堆内存中的对象数据就会被垃圾回收器回收，将这一块内存空间释放掉了；java中的垃圾回收器GC机制
	主要针对堆内存中的垃圾数据，垃圾数据就是没有任何引用指向该对象。）


	怎么访问实例变量：
		
		语法：引用.实例变量名（a1.name-------------a1是引用，name是实例变量名）

	程序什么情况下会出现空指针异常：

		前提条件：空引用访问实例对象相关的数据时，会出现空指针

		public class Test{
			public static void main(String[] args){
				Customer c=new Customer();//引用中存的是对象在堆内存中的内存地址
				System.out.println(c.id);
				c=null;//NullPointerException: Cannot read field "id" because "<local1>" is null
									 // at PersonTest.main(PersonTest.java:16)
				System.out.println(c.id);//出现空指针异常，c.id是c引用代表的对象在堆内存中的地址；
			}
		}
		class Customer{
			int id;
		}

方法调用时，参数的传递问题：
	参数传递时，与类型无关，不管是基本数据类型还是引用数据类型，统一将盒子中保存的数值复制一份，
	传递下去，内存地址也是值，也是复制一份进行传递 
	public class Test{
			public static void main(String[] args){
				int x=10;
				int y=x;

				int a=10;
				add(a);
				System.out.println(a);---------------输出的是10
			}
			public static void add(int b){------------实际上是：int b=a完成了一次复制再赋值；即先对a中的数进行复制，再进行赋值，也就是两个地址
				b++;
				System.out.println(b);-----------------输出的是11
			}
	}




java中关于方法调用时的参数传递实际上只有一个规则：

不管你是基本数据类型还是引用数据类型，实际上在传递的时候都是将变量中保存的那个值复制一份，传过去；
int x=10;
int y=x;把x中保存的10复制一份传给y。x和y都是局部变量

Person p1=0x1234;
Person p2=p1;把p1中保存的0x1234	复制一份传递给p2，这里的p1和p2都是局部变量，且保存的都是指向对象的地址
0x1234，这就是说，其中任意一个引用改变这个对象中的属性的话就会出现，两个引用，不论谁访问都会出现新的
数值。
就好像你和你老婆都有家门钥匙，她往家里搬了电视，你回家也会见到电视。

		public class Test01
		{
			public static void main (String[] args){
					Person p=new Person();//这里的p中存的是对象在堆内存中的内存地址，
					p.age=10;
					add(p);
					System.out.println(p.age);
			}
			public static void add(Person p){//p进行赋值的时候将存的内存地址赋值一份给了这里作为方法的参数
					p.age++;//对于p的地址指向的对象里的数据采用这样的形式进行改变
					System.out.println(p.age);
			}
		}
		class Person
		{
			int age;
		}



构造方法：

	当一个类中，没有提供任何构造方法，系统默认提供一个无参数的构造方法。
	这个没有参数的构造方法叫做缺省构造器。

	当一个类中手动的提供了构造方法，那么系统将不在默认提供无参数的构造方法。

	无参数的构造方法和有参数的构造方法都可以调用
	Student c=new Student();
	Student a=new Student(132);

	构造方法支持重载：一个类中可以有多个，并且构造的方法名字都是一样的；
	方法重载特点：在同一个类中，方法名相同，参数列表不同；



构造方法：

	一个比较特殊的方法，通过构造方法可以完成对象的创建，以及实例变量的初始化。也就是说：构造方法
	是用来创建对象并且同时给对象赋值；实例变量没有赋值的时候，有系统的缺省值；

	当一个类没有提供任何构造方法的时候，系统默认提供一个无参数的构造方法；
	这里建议将无参数构造方法手动写出来，这样就一定不会出问题

	调用构造方法怎么调用：
			使用new运算符进行调用；

	对于实例变量来说：只要在构造方法时没有手动给他赋值，统一都会默认赋值，默认系统赋值


	实例变量的默认赋值过程并不在类加载的时候进行，而是在构造方法执行的过程中完成初始化赋值的。


	构造方法的语法结构是：
		[修饰符列表]  构造方法名（形式参数列表）{
				方法体；
		}

	注意：1.构造方法的修饰符类表统一写public ，不写public static

		    2.构造方法名必须和类名一致；

		    3.构造方法不需要指定返回值类型，也不能写void，写上void表示普通方法，而非构造方法；
	
	
	普通方法的语法结构：
		[修饰符列表]	返回值类型	方法名（形式参数列表）{
				方法体；
		}


class Student01
{
	int num;
	String name;
	int age;
	//当前这个Student类中没有定义任何构造方法；
	//但是系统实际上会自动给Student类提供一个无参数的构造方法，即：
	public Student01(){//这里修饰符列表为public，没有返回值类型
		System.out.println("无参数的构造方法执行了");
	}
	//定义一个有参数的构造方法
	public Student01(int a){
	//这里的有参数的构造方法是在前面无参数的构造方法的基础上存在的，方法重载；
	//如果将前面的无参数的构造方法都注销掉，只留下有参数的构造方法再利用new Student（）调用就会报错，
	//要给参数，也就是说，如果没有构造方法，系统会自带一个默认的构造方法，但是你自己定义了，系统就
	//不再自主定义构造方法。
		System.out.println(a);
	}
}

public class Student
{
	public static void main(String[] args){
			Student01 s1=new Student01();//创建一个Student01的对象；调用构造方法，采用new的运算符
			System.out.println(s1);//可以输出引用说明对象创建完成了。

			new Student01();//调用Student类的无参数构造方法
	}
}

