/*
当前程序存在的问题：
		鸟人在执行move（）方法的时候，最好的输出的结果是：“鸟儿在飞翔”
		但是当前的程序在执行move()方法的时候输出的结果是：“动物在移动”
		显然Bird子类从父类中继承的方法已经无法满足子类的业务需要
*/

public class OverRideTest01{
	public static void main(String[] args){
		//创建鸟的对象
		Bird b=new Bird();
		//让鸟儿移动
		b.move();
		//创建猫的对象
		Cat c=new Cat();
		c.move();
	}
}

//父类
class Animal{
	public void move(){
		println("动物在以移动");
	}
}

//子类
class Bird extands Animal{
	//子类继承了父类之后，有一些‘行为’可能不需要改进，有一些行为可能面临改进。
	//因为父类中的继承过来的方法已经无法满足子类的业务需要
	//鸟儿在移动的时候希望输出鸟儿在飞翔
}

class Cat extands Animal{
	//猫在移动希望输出的是：猫在走猫步
}




/*
什么时候我们考虑使用“方法覆盖”？
	
	子类继承父类之后，当继承过来的方法无法满足当前的子类的业务需要的时候，
	子类有权利对这个方法进行重新编写，有必要进行方法的覆盖

方法的覆盖又叫做：方法重写（重新编写），Override ,Overwrite

重要结论：当子类对父类继承过来的方法进行“方法覆盖”之后，子类对象调用该方法的时候。一定执行覆盖之后的方法

当我们的代码怎么编写的时候，在代码级别上，构成了方法覆盖呢？

				条件1：两个类必须要有继承关系

				条件2：重写之后的方法和重写之前的方法具有：
									相同的返回值类型
									相同的方法名
									相同的形式参数列表

				条件3：访问权限不能更低，可以更高（这个点现记住）

				条件4：重写之后的方法不能比之前的方法抛出更多的异常，可以更少（这个先记住）


这里还有几个注意事项：（学了多态之后自然就会明白）

		注意1：方法覆盖针对于方法，和属性无关。
		注意2：私有方法无法被覆盖
		注意3：构造方法不能被继承，所以构造方法不能被覆盖
		注意4：方法覆盖只是针对于“实例方法”，“静态方法覆盖”没有意义

		静态的方法可以被继承，但是不能重写。
		如果父类中有?个静态的方法，子类也有?个完全一样的方法，那么该子类的方法会把父类的方法隐藏，而不是重写。
		通俗的讲就是父类的方法和子类的方法是两个没有关系的方法，具体调用哪?个方法是看是哪个对象的引用；
		这种父子类方法也不在存在多态的性质。《Java编程思想》中这样提到“只有普通的方法调用可以是多态的”。


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

回顾一下：方法重载
	什么时候考虑方法重载：
		当在一个类中，功能相似的话，建议 将名字定义为一样的，这样代码美观，并且方便编程。
	
	什么条件满足之后才能进行方法重载？
		条件1：在同一个类当中
		条件2：方法名相同
		条件3：参数列表不同（个数、顺序、类型） 
*/

public class OverRideTest02{
	public static void main(String[] args){
		//创建鸟的对象
		Bird b=new Bird();
		//让鸟儿移动
		b.move();
		//创建猫的对象
		Cat c=new Cat();
		c.move();
	}
}

//父类
class Animal{
	public void move(){
		System.out.println("动物在以移动");
	}
	public void sing(int i){
		System.out.println("是谁在唱歌");
	}
}

//子类
class Bird extends Animal{
//对move方法进行覆盖，方法重写，override
//最好将父类中的方法原封不动的复制过来；方法的覆盖就是将原来的方法覆盖掉了，原来的方法没有了
	public void move(){
		System.out.println("鸟儿在飞翔");
	}


//这里的sing()和父类中的sing（int i）没有构成方法的覆盖：
//原因是：两个方法根本就是两个完全不同的方法，
//可以说两个方法构成方法的重载，因为Bird类继承了Animal类，相当于sing(int i)方法已经在Bird类里面 
		public void sing(){
		System.out.println("是鸟在唱歌");
		}

		
}

class Cat extends Animal{
	public void move(){
		System.out.println("猫在走猫步");
	}
}

方法重载和方法覆盖的区别：
	方法重载发生在同一个类当中；
	方法覆盖发生在具有继承关系的父子类当中。

	方法重载是再一个类当中，方法名相同，参数列表不同
	方法覆盖是在具有继承关系的父子类，并且重写之后的方法必须和之前的方法保持一致：
		方法名一致，参数列表一致，返回值类型一致


/*这个例子用来说明静态方法继承没有意义，可以被继承，但是如果父类中有?个静态的方法，
	子类也有?个完全一样的方法，那么该子类的方法会把父类的方法隐藏，而不是重写。
public class test{
    public static void main(String[] args){
        //创建鸟的对象
        Animall b=new Birdl();
        //让鸟儿移动
        b.move();
        System.out.println("------------------");
        b.sing(20);
        System.out.println("------------------");
        Animall.sing(30);
        System.out.println("------------------");
        Birdl.sing(10);
        System.out.println("------------------");
        //创建猫的对象
        Animall c=new Catl();
        c.move();
        System.out.println("------------------");
        c.sing(12);
    }
}

//父类
class Animall{
    public void move(){
        System.out.println("动物在以移动");
    }
    public static void sing(int i){
        System.out.println("是谁在唱歌");
    }
}

//子类
class Birdl extends Animall{
    //对move方法进行覆盖，方法重写，override
//最好将父类中的方法原封不动的复制过来；方法的覆盖就是将原来的方法覆盖掉了，原来的方法没有了
    public void move(){
        System.out.println("鸟儿在飞翔");
    }


    //这里的sing()和父类中的sing（int i）没有构成方法的覆盖：
//原因是：两个方法根本就是两个完全不同的方法，
//可以说两个方法构成方法的重载，因为Bird类继承了Animal类，相当于sing(int i)方法已经在Bird类里面
    public static void sing(int i){
        System.out.println("是鸟在唱歌");
    }


}

class Catl extends Animall{
    public void move(){
        System.out.println("猫在走猫步");
    }
}



结果：
				鸟儿在飞翔
				------------------
				是谁在唱歌                   -----------------出现这一句是因为：这里的多态中b是父类型的引用，也就是：Animall类的。
				------------------
				是谁在唱歌
				------------------
				是鸟在唱歌
				------------------
				猫在走猫步
				------------------
				是谁在唱歌
*/