继承：什么是继承？
		继承的作用：
				基本作用：子类可以继承父类，代码可以得到复用；
				主要作用：因为有了继承关系，后期才有方法的覆盖和多态机制

		继承的相关特性：
				
			① B类继承A类，则称A类为超类(superclass)、父类、基类，B类则称为子类(subclass)、派生类、扩展类。
					class	 A {}
					class	 B extends A{} 父类和子类
					superclass 父类
					subclass 子类

			② java中的继承只支持单继承，不支持多继承，C++中支持多继承，这也是java体现简单性的一点，换句话说，
					java中不允许这样写代码：class B extends A,C{ }。 

			③ 虽然java中不支持多继承，但有的时候会产生间接继承的效果，例如：
					class C extends B，
					class B extends A，
					也就是说，C直接继承B，其实C还间接继承A。 

			④ java中规定，子类继承父类，除构造方法不能继承外，剩下都可以继承。
					但是，私有的属性无法在子类中直接访问（父类中private修饰的不能在子类中直接访问）。--------继承了但是无法直接访问。

			⑤ java中的类没有显示的继承任何类，则默认继承Object类，Object类是java语言提供的根类（老祖宗类），
					也就是说，一个对象与生俱来就有Object类型中所有的特征。 

			⑥ 继承也存在一些缺点，例如：CreditAccount类继承Account类会导致它们之间的耦合度非常高，
					Account类发生改变之后会马上影响到CreditAccount类。 

					class A{
					}

					class B{
					}

					class C extends A{
					}

					class D extends B{
					}

					//语法错误：class E extends A,B{}
					//java中只允许单继承，不允许多继承，java是简单的，C++支持多重继承
					//C++更接近现实一些，因为在现实世界中儿子同时继承父母双方的特征

					class X{
					}

					class Y extends X{
					
					}
					class Z extends Y{--------------其实这就是Z继承了X的和Y的
							Z继承了Y，Y继承了X，X继承了Object;Z对象具有Object对象的特征（基因）
							Object是所有类的超类，相当于老祖宗，类体系中的根
							java这么庞大的继承结构，顶点是Object。
					}


 1.1 子类继承父类之后，是将父类继承过来的方法归为自己所有，实际上调用的不是父类的方法，是他自己的方法，继承过来就是自己的

			实际开发中，满足什么条件的时候可以继承？
					凡是满足“is a”的方法去描述：
							例如：Cat is a Animal;  Dog is a Animal;

1.2 假设以后开发中，有一个A类，有一个B类，AB类确实有重复的代码，他们之间是不一定可以进行继承的；还要看他们之间是否满足is a 的逻辑关系
1.3 任何一个类，没有显示继承任何类，默认继承Object,那么Object类当中包含哪些方法呢？
		java中内置了一套庞大的类库，程序员不需要从0开始写代码，程序员可以基于这套庞大的类库进行二次开发。开发速度较快，因为jdk内置的这套库
		实现了很多基础的功能。
		
		例如：String是SUN公司编写的字符串类、System是SUN公司编写的系统类

		JDK原码在什么位置：C:\Program Files\Java\jdk-18\lib\src.zip

		System.out.println("Hello World!");
		System.out中，out后面没有小括号，说明out是变量名，另外。System是一个类名，直接使用类名System.out，说明out是一个静态变量。
		System.out返回一个对象，然后采用“对象.”的方式访问println（）方法

		实例程序：
			
			public class Test{
				static Student stu=new Student();//静态变量
				public static void main(String[] args){
					Test.stu.exam();--------------这里看到，stu是一个静态变量，Test是一个类，类访问了静态变量之后，静态变量又调用了原类下面的实例方法。
					System.out.println("hello world");
				}
			}

			class Student{
				public void exam(){
					System.out.println("考试");
				}
			}

	editplus中蓝色是关键字
	黑色是标识符
	System.out.println("hello world");中，System、out、println都是标识符
	在editplus 中的红色字体代表这个类是SUN公司的JDK写好的一个类。

P284