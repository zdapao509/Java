1.键盘输入方式：
		第一种方式：
					public class Input{
							public static void main(String[] args){
											java.util.Scanner s=new java.util.Scanner(System.in,"GBK");---------前提;如果不加GBK就会出现
																																																		中文乱码的错误
											
												int i=s.nextInt();-------------------接收一个整数类型数据
												System.out.println("您输入的数字是："+i);

												System.out.print("谁是世界上最帅的人");
												String  a=s.next();-----------------接收一个字符串
												System.out.println(a);
								}
					}


		第二种方式:
					import java.util.Scanner;
					//更有交互性
					public class Input{
							public static void main(String[] args){
											 Scanner s=new  Scanner(System.in,"GBK");---------前提;如果不加GBK就会出现
																																								  中文乱码的错误
											
												int i=s.nextInt();-------------------接收一个整数类型数据
												System.out.println("您输入的数字是："+i);

												System.out.print("谁是世界上最帅的人");
												String  a=s.next();-----------------接收一个字符串
												System.out.println(a);
								}
					}

2.控制语句：
			让我们的程序有条理性，逻辑性

			2.1控制语句包括几类：3类
					选择语句
					循环语句
					转向语句

			2.2选择语句：也叫分支语句

					2.2.1 if语句

							if 语句的语法结构与运行原理

								if语句是时支语句，也可以叫做条件语句
								if语句的语法格式： 
										第一种写法：
													int a =100；
													int b=200；
													if（布尔表达式a==b）{---------------------注意：if后面括号里面只能是布尔类型
																	java语句 
																	java语句
													}
													这里的大括号{}叫做一个分支。如果布尔表达式结果是true就执行括号中的程序，
														否则不执行

										第二种语法：---------------一定会有一条分支执行
													if （布尔表达式）{分支1
															Java语句；
													}else{分支2
															Java语句；
													}
													如果布尔表达式运行结果是true，就执行分支1；否则执行分支2；
													保证一定会有一个分支执行

										第三种语法：
												if （布尔表达式1）{分支1
												Java语句
												}else if（布尔表达式2）{分支2
												Java语句
												}else if（布尔表达式3）{分支3
												Java语句
												}
											如果布尔表达式1为true就执行分支1，然后if语句执行结束，否则判断布尔表达式2，
																																										是否为true，为true执行分支2。
											
											第四种语法：------------一定会有一条分支执行
												if （布尔表达式1）{分支1
												Java语句
												}else if（布尔表达式2）{分支2
												Java语句
												}else if（布尔表达式3）{分支3
												Java语句
												}else{
												Java语句            以上语句没有一个成立的，就执行else
												}


											注意：对于if语句在任何情况下，只能有一个分支执行，
																	不可能存在2个或者更多的分支执行。
															
																当分支中Java语句只有一条，那么大括号可以省略，
																但是为了可读性，最好不要省略。 


			2.2.2 switch语句

			选择语句，分支语句
			switch语句语法格式：
					
					switch（值）{
							case 值1：
									java语句
									break；
							case 值2：
									java语句；
									break；
							case 值3：
									java 语句；
									break；
							default：
									java语句；
					}

					以上是一个完整的switch语句：
							其中：break语句不是必须的  default分支也不是必须的

					switch语句只支持int类型和String 类型；
					在JDK 版本8之前不支持String 类型，只支持int类型；
					switch语句本质上是只支持int和String 类型，
					但是byte short char也可以使用在switch类型，因为可以直接进行int类型转换。

					switch 语句中“值1”，“值2”比较的时候会使用“==”进行比较；

					switch语句的执行原理
					值与值1进行比较，如果相同，则执行该分支中的java语句，然后遇到break语句，switch语句就结束了；
					如果值与值1不相等，会继续拿值与值2进行比较，如果相同，则执行该分支中的java语句，然后遇到break，结束

					如果分支执行了，但是最后没有break，此时会发生case穿透现象

					所有的case都没有匹配成功，那么最后执行default分支




			2.3循环语句  ：反复执行某代码块

						在现实世界中，有很多东西会重复使用，代码重复利用需要进行循环，已实现减少代码量

				2.3.1	for循环

							for 循环的语法机制及运行原理：
									语法机制：
											for(初始化表达式；条件表达式；更新表达式){
													循环体；//循环体由java语句构成
											}
									
										注意：
											第一：初始化表达式最先执行，并且在一个循环中只执行一次
											第二：条件表达式结果必须是一个布尔类型，也就是true或者false
											第三：循环体执行条件为条件表达式为真，条件表达式执行结果为false时终止执行循环体
										
										执行原理：
												先执行条件表达式，并且初始化表达式只执行1次。
												然后判断条件表达式的结果，如果条件表达式的结果是true，就执行循环体，然后执行更新表达式
												语句；更新完成之后再判断条件表达式的结果。如果还是true继续执行循环体。
												直到更新表达式的结果经过条件表达式判断为false之后循环终止；

												注意：更新表达式的作用是：控制循环次数， 换句话说，更新表达式实际上在改变某个变量得值，

												这样表达式的结果才可能是true或false，从而终止for循环的执行，如果缺失更新表达式，
												
												很可能导致死循环


									所有合法的控制语句都可以嵌套使用。
									for嵌套一个for循环；可以看成：
									for(){
									//在分析外层循环的时候，把里面的for当做一段普通的代码语句；
									for(){}
									}


				2.3.2 while循环
						
						while循环：
							语法机制及执行原理：
							语法机制：
									while（布尔表达式）{
									循环体；
									}
							执行原理：判断布尔表达式，如果为true执行循环体，循环结束之后，再次判断布尔表达式的结果，
							如果还是true，继续执行循环体；直到布尔表达式结果为false，while循环结束。

							while循环次数：n
										0-n次
								


				2.3.3 do...while...循环
							
							do...while 循环语句执行原理及语法机制：
								语法机制：
										do{
										循环体；
										}while（布尔表达式）；

										注意：do...while 循环之后别漏掉分号；循环至少执行一次，循环体执行次数：1~n；

			2.4 转向语句
					break语句
							
							1.一个单词成为一个完整的语句，continue也是这样。 
									break语句用在哪里：两个位置
											第一个位置：
													switch语句中，终止switch语句，防止穿透现象
											第二个位置：
													用在循环语句中，用来终止循环语句的执行
													用在for while  do ... while 中
											


					continue
												作用：终止当前本次循环，直接进入下一次循环；（直接进行下一次循环的更新表达式）

												for（）{
														if (){
																continue;//当条件成立，执行continue语句，此时下面的语句不再执行，直接执行更新表达式。
														}
														code 1；
														code 2；
												}

					return
					

