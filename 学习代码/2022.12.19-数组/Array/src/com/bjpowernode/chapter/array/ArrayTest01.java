package com.bjpowernode.chapter.array;

/*
Array:
    1.java 语言中的数组是一种引用数据类型。不属于基本数据类型。数组的父类是Object

    2.数组实际上是一个容器，可以同时存储多个元素。（数组是一个数据的集合；数组的字面意思是：一组数据）

    3.数组当中可以存储“基本数据类型”的数据，也可以存储“引用数据类型”的数据。

    4.数组因为是引用类型，所以数组对象是存储在堆内存中的，数组是存储在堆中的。

    5.数组当中如果存储的是“java对象”的话，实际上存储的是对象的引用（内存地址），数组中不能只接存储Java对象

    6.数组一旦创建，Java中规定，数组的长度就不可变。数组长度不可变

    7.数组的分类包括：一维数组、二维数组、三维数组或者多维数组    其中，一维数组较多。二维数组偶尔使用！

    8.所有数组都有length属性，Java自带的，用来获取数组中元素的个数

    9.Java中的数组要求数组中元素的类型统一，比如int类型的数组只能存储int类型，Person数组中只能存储Person类型的

        例如：在超市中买水果，购物袋中只能装苹果，不能同时装苹果和橘子

    10.数组在内存中存储的时候，数组中元素的内存地址（存储的每一个元素都是有规则的挨着排列的）是连续的，内存地址连续；

        这是数组存储元素的特点，数组实际上是一个简单的数据结构。

    11.所有的数组都是拿第一个小方框的内存地址作为整个数组对象的内存地址。数组中首元素的内存地址作为整个数组对象的内存地址：这是因为数组的内存地址是连续的

    12.数组中每一个元素都是有下标的；从0开始，以1递增。最后一个元素的下标是：length-1

        下标是非常重要的，因为我们对数组中的元素进行存取的时候，都需要通过下标来进行

    13.数组这种数据结构的优缺点是什么？

        优点：查询、查找、检索某个下标上的元素时，效率极高。可以说是查询效率最高的一个数据结构

            为什么检索效率高？

                1.每一个元素的内存地址在空间存储上是连续的

                2.每一个元素类型相同。所以占用的空间大小相同

                3.知道第一个元素的内存地址，知道每一个元素所占的空间的大小，又知道下标，

                    所以通过一个数学表达式就可以计算出某个下标上元素的内存地址。直接通过内存地址定位元素，所以检索效率是最高的

                数组中存储100个元素，或者存储100万个元素，在元素查询、检索方面，效率是一样的，因为数组中元素的查找的时候不会一个一个的找，

                是通过数学表达式计算出来的，算出内存地址，直接定位的。

        缺点：

            1.由于为了保证数组中每个元素的内存地址连续，所以在数组上随机删除或者随机增加一个元素的时候，效率较低，

                因为随机增删元素会涉及在后面元素统一向前或者统一向后位移的操作

            2.数组不能存储大数据量，为什么？

                因为很难在内存空间上找到一块特别大的连续的内存空间

            注意：对于数组中最后一个元素的增删，是没有效率影响的，

    14.怎么声明或者是定义一个数组？

        语法格式：

            int[] array1;
            double[] array2;
            boolean[] array3;
            String[] array4;
            Object[] array5;

    15.怎么初始化一个一维数组呢？

        包括两种方式：

            静态初始化一维数组。
            动态初始化一维数组；

        静态初始化语法格式：

            int[] array1={100,23,15,20};

        动态初始化语法格式：

            int[] array=new int[5];//这里的5表示：数组的元素个数。初始化一个5个长度的int类型的数组，每个元素默认值为0；

            String[] name=new String[6];//初始化6个长度的String类型的数组，每个元素默认值为null；
* */

public class ArrayTest01 {
//    声明一个int类型的数组，使用静态初始化的方式。
    int[] array1={100,20,300};//这是java中的数组定义方式
    int a[]={0,20};//c++中的数组定义方式，java中允许这样的定义，但是不建议这样定义

    public static void main(String[] args) {
        ArrayTest01 a=new ArrayTest01();
        System.out.println(a.array1.length);//所有的数组都有length属性

//        数组中的元素都有下标
//        通过下标对数组中的元素进行存取
        System.out.println("最后一个元素："+a.array1[a.array1.length-1]);
        System.out.println(a.array1[0]);
        a.array1[0]=1111;
        a.array1[a.array1.length-1]=222;
        System.out.println(a.array1[0]);
        System.out.println(a.array1[a.array1.length-1]);
        System.out.println("-----------------------------------------------");

//        一维数组怎么遍历：
        for (int i=0;i<a.array1.length;i++){
            System.out.println(a.array1[i]);
        }

//        如果超出索引怎么办？
//        System.out.println(a.array1[7]);//报错：ArrayIndexOutOfBoundsException

//        从最后一个元素遍历到第一个元素：
        System.out.println("***************************************************");
        for(int i=a.array1.length-1;i>=0;i--){
            System.out.println(a.array1[i]);
        }
    }
}
