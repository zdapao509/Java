/*
栈：方法只要执行会压栈：局部变量
堆：new出来的对象都在堆中；垃圾回收器主要针对堆区（实例变量）
方法区：类的信息，字节码信息，代码片段。（静态变量）

方法的代码片段放在方法区，但是方法执行过程当中需要的内存在栈中
*/

public class Test04 {
		//静态变量在什么时候初始化？类加载时初始化
		//静态变量存储在哪里？方法区
		static int i=100;
		//静态代码块什么时候执行？类加载时执行
		static{
				//这里可以访问i
				System.out.println("i="+i);
		}

		int k=111;
		static{
			//k变量可以访问吗？
			//static静态代码块在类加载时执行，并且只执行一次。
			//类加载时，k变量空间还没有开辟出来。
			//System.out.println(k);//无法从静态上下文中引用非静态 变量 k

			//可以访问name嘛？
			//静态代码块和静态变量都在类加载的时候进行，时间相同，只能靠代码的顺序来决定谁先谁后。
			//System.out.println(name);//错误: 非法前向引用
		}

		//静态变量在静态代码块下面
		static String name="zhang";


		//入口：main方法执行之前实际上执行了很多代码
		public static void main(String[] args){
			System.out.println("main begin");
		}

		//在类体中，方法是没有先后顺序的；你是从主方法中执行的。
		public static void x(){
		
		}
		public static void y(){
		
		}

}

/*
总结：
	到目前为止，所遇到的所有的java程序中，有顺序要求的是哪些？
		第一：对于一个方法来说，方法体中的代码是有顺序的，遵循自上而下的顺序执行
		第二：静态代码块1和静态代码块2是有先后顺序的。
		第三：静态代码块和静态变量是有先后顺序的。
*/